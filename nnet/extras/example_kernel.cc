// To aid in debugging, this file just contains some example code that gets
// auto-generated by this framework. Normally this stage is transparent because
// the generated code gets passed straight to the opencl compiler, however I'm
// adding it to show what goes on behind the scenes.
#include <iostream>

int main() {
  float GRADIENT[] = {
      // Layer 1
      -0.111111, 0, 0,
      0, 0, 0,
      0, 0,0,
      // Layer 2
      0, 0, 0,
      0, 0, 0,
      0, 0, 0
  };

  float W[] = {
      // Filter 1.
      0,  1,  0,

      0,  -1, 1,

      -1, 1,  0,

      0,  -1, 1,

      0,  -1, -1,

      0,  0,  -1,

      -1, -1, 1,

      1,  1,  0,

      0,  1,  1,

      1,
      // Filter 2.

      0,  -1, -1,

      1,  1,  0,

      0,  0,  0,

      0,  -1, -1,

      0,  0,  0,

      1,  0,  -1,

      1,  1,  -1,

      1,  1,  0,

      1,  0,  0,

      0,
  };

  int input_index = 51;
  int z = input_index / 25;
  double gradient = 0;
  std::cout << "out_a_row: " << 
           ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) /
               (5)) +
              ((1) * (-1))) +
             (1)) +
            ((1) * (-1))) /
           (2) << std::endl;
  std::cout << "out_b_row: " << 
       ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) / (5)) +
          (1)) +
         (1)) +
        ((1) * (-1))) /
           (2) << std::endl;
  std::cout << "out_a_col: " << 
             ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) %
                 (5)) +
                ((1) * (-1))) +
               (1)) +
              ((1) * (-1))) /
             (2) << std::endl;
  std::cout << "out_b_col: " << 
         ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) % (5)) +
            (1)) +
           (1)) +
          ((1) * (-1))) /
             (2) << std::endl;
  for (int filter = 0; filter <= 1; ++filter) {
  for (int d =
           ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) /
               (5)) +
              ((1) * (-1))) +
             (1)) +
            ((1) * (-1))) /
           (2);
       d <=
       ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) / (5)) +
          (1)) +
         (1)) +
        ((1) * (-1))) /
           (2);
       ++d) {
    for (int k =
             ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) %
                 (5)) +
                ((1) * (-1))) +
               (1)) +
              ((1) * (-1))) /
             (2);
         k <=
         ((((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) % (5)) +
            (1)) +
           (1)) +
          ((1) * (-1))) /
             (2);
         ++k) {
      std::cout << "(row, col) = (" << d << ", " << k << ")" << std::endl;
      std::cout
          << "(self_in_neighbor_row, self_in_neighbor_col) = ("
          << ((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) /
               (5)) +
              (((((d) * (2)) + ((1) * (-1))) + (1)) * (-1))) +
                 (1)
          << ", "
          << ((((input_index) + ((((input_index) / (25)) * (25)) * (-1))) %
               (5)) +
              (((((k) * (2)) + ((1) * (-1))) + (1)) * (-1))) +
                 (1)
          << ")" << std::endl;
      std::cout << "Filter: " << filter << std::endl;
      double grad_comp = (((((z) >= (0)) && (!((z) >= (3))))
                   ? (((((((((input_index) +
                             ((((input_index) / (25)) * (25)) * (-1))) %
                            (5)) +
                           (((((k) * (2)) + ((1) * (-1))) + (1)) * (-1))) +
                          (1)) >= (0)) &&
                        (!((((((input_index) +
                               ((((input_index) / (25)) * (25)) * (-1))) %
                              (5)) +
                             (((((k) * (2)) + ((1) * (-1))) + (1)) * (-1))) +
                            (1)) >= (3))))
                           ? (((((((((input_index) +
                                     ((((input_index) / (25)) * (25)) * (-1))) /
                                    (5)) +
                                   (((((d) * (2)) + ((1) * (-1))) + (1)) *
                                    (-1))) +
                                  (1)) >= (0)) &&
                                (!((((((input_index) +
                                       ((((input_index) / (25)) * (25)) *
                                        (-1))) /
                                      (5)) +
                                     (((((d) * (2)) + ((1) * (-1))) + (1)) *
                                      (-1))) +
                                    (1)) >= (3))))
                                   ? (((((filter) >= (0)) &&
                                        (!((filter) >= (2))))
                                           ? (W[((filter) * (28)) +
                                                ((((9) * (z)) +
                                                  ((((((input_index) +
                                                       ((((input_index) /
                                                          (25)) *
                                                         (25)) *
                                                        (-1))) /
                                                      (5)) +
                                                     (((((d) * (2)) +
                                                        ((1) * (-1))) +
                                                       (1)) *
                                                      (-1))) +
                                                    (1)) *
                                                   (3))) +
                                                 (((((input_index) +
                                                     ((((input_index) / (25)) *
                                                       (25)) *
                                                      (-1))) %
                                                    (5)) +
                                                   (((((k) * (2)) +
                                                      ((1) * (-1))) +
                                                     (1)) *
                                                    (-1))) +
                                                  (1)))])
                                           : (0)))
                                   : (0)))
                           : (0)))
                   : (0))) *
                 (GRADIENT[(((9) * (filter)) + ((d) * (3))) + (k)]);
      std::cout << "Gradient: " << grad_comp << std::endl;
      gradient += grad_comp;
    }
  }
  }
  std::cout << "Grad total: " << gradient << std::endl;
}
